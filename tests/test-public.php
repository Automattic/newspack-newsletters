<?php
/**
 * Class Public Test
 *
 * @package Newspack_Newsletters
 */

/**
 * Public newsletters test case.
 */
class Newsletter_Public_Test extends WP_UnitTestCase {
	/**
	 * Array of posts created by this test suite.
	 *
	 * @var array
	 */
	private static $posts = [];

	/**
	 * Number of regular posts to generate as control posts.
	 *
	 * @var int
	 */
	private static $total_posts = 5;

	/**
	 * Term ID of category term generated by this test suite.
	 *
	 * @var int
	 */
	private static $category = 0;

	/**
	 * Term ID of tag term generated by this test suite.
	 *
	 * @var int
	 */
	private static $tag = 0;

	/**
	 * Post ID of public newsletter generated by this test suite.
	 *
	 * @var int
	 */
	private static $public = 0;

	/**
	 * Post ID of non-public newsletter generated by this test suite.
	 *
	 * @var int
	 */
	private static $private = 0;

	public function setUp() { // phpcs:ignore Squiz.Commenting.FunctionComment.Missing
		// Remove any generated posts (from previous tests).
		foreach ( self::$posts as $post_id ) {
			wp_delete_post( $post_id );
		}

		// Remove any terms (from previous tests).
		wp_delete_term( self::$category, 'category' );
		wp_delete_term( self::$tag, 'post_tag' );

		self::$category = self::create_term( 'Post category', 'category' );
		self::$tag      = self::create_term( 'Post tag', 'post_tag' );
		$index          = 1;

		while ( $index <= self::$total_posts ) {
			$post_id = self::factory()->post->create(
				[
					'post_title'   => 'Regular Post ' . (string) $index,
					'post_content' => 'Some post content',
					'post_author'  => 1,
				]
			);
			wp_set_object_terms( $post_id, self::$category, 'category', true );
			wp_set_object_terms( $post_id, self::$tag, 'post_tag', true );

			self::$posts[] = $post_id;
			$index         ++;
		}

		// Create a public newsletter.
		self::$public = self::factory()->post->create(
			[
				'post_type'    => \Newspack_Newsletters::NEWSPACK_NEWSLETTERS_CPT,
				'post_title'   => 'Public Newsletter',
				'post_content' => 'Some newsletter content',
				'post_author'  => 1,
			]
		);
		wp_set_object_terms( self::$public, self::$category, 'category', true );
		wp_set_object_terms( self::$public, self::$tag, 'post_tag', true );
		update_post_meta( self::$public, 'is_public', true );

		// Create a non-public newsletter.
		self::$private = self::factory()->post->create(
			[
				'post_type'    => \Newspack_Newsletters::NEWSPACK_NEWSLETTERS_CPT,
				'post_title'   => 'Private Newsletter',
				'post_content' => 'Some newsletter content',
				'post_author'  => 1,
			]
		);
		wp_set_object_terms( self::$private, self::$category, 'category', true );
		wp_set_object_terms( self::$private, self::$tag, 'post_tag', true );
		update_post_meta( self::$private, 'is_public', false );
	}

	/**
	 * Create a term.
	 *
	 * @param string $term_name Name of the term to create.
	 * @param string $taxonomy Type of term to create.
	 *
	 * @return array Array of term data.
	 */
	public function create_term( $term_name, $taxonomy ) {
		$term_id = self::factory()->term->create(
			[
				'name'     => $term_name,
				'taxonomy' => $taxonomy,
			]
		);

		return $term_id;
	}

	/**
	 * Test category archive.
	 */
	public function test_category_archive() {
		self::go_to( get_term_link( self::$category ) );
		self::assertQueryTrue( 'is_archive', 'is_category' );

		global $wp_query;
		$post_titles = array_map(
			function( $post ) {
				return $post->post_title;
			},
			$wp_query->posts
		);

		$index = 1;
		while ( $index <= self::$total_posts ) {
			self::assertContains(
				'Regular Post ' . (string) $index,
				$post_titles,
				'Query contains regular posts.'
			);
			$index ++;
		}

		self::assertContains(
			get_the_title( self::$public ),
			$post_titles,
			'Query contains the public newsletter.'
		);

		self::assertNotContains(
			get_the_title( self::$private ),
			$post_titles,
			'Query does not contain the private newsletter.'
		);
	}

	/**
	 * Test tag archive.
	 */
	public function test_tag_archive() {
		self::go_to( get_term_link( self::$tag ) );
		self::assertQueryTrue( 'is_archive', 'is_tag' );

		global $wp_query;
		$post_titles = array_map(
			function( $post ) {
				return $post->post_title;
			},
			$wp_query->posts
		);

		$index = 1;
		while ( $index <= self::$total_posts ) {
			self::assertContains(
				'Regular Post ' . (string) $index,
				$post_titles,
				'Query contains regular posts.'
			);
			$index ++;
		}

		self::assertContains(
			get_the_title( self::$public ),
			$post_titles,
			'Query contains the public newsletter.'
		);

		self::assertNotContains(
			get_the_title( self::$private ),
			$post_titles,
			'Query does not contain the private newsletter.'
		);
	}

	/**
	 * Test author archive.
	 */
	public function test_author_archive() {
		self::go_to( get_author_posts_url( 1 ) );
		self::assertQueryTrue( 'is_archive', 'is_author' );

		global $wp_query;
		$post_titles = array_map(
			function( $post ) {
				return $post->post_title;
			},
			$wp_query->posts
		);

		$index = 1;
		while ( $index <= self::$total_posts ) {
			self::assertContains(
				'Regular Post ' . (string) $index,
				$post_titles,
				'Query contains regular posts.'
			);
			$index ++;
		}

		self::assertContains(
			get_the_title( self::$public ),
			$post_titles,
			'Query contains the public newsletter.'
		);

		self::assertNotContains(
			get_the_title( self::$private ),
			$post_titles,
			'Query does not contain the private newsletter.'
		);
	}

	/**
	 * Test date archive.
	 */
	public function test_date_archive() {
		self::go_to( get_day_link( false, false, false ) ); // Date archive URL for the current day.
		self::assertQueryTrue( 'is_archive', 'is_date', 'is_day' );

		global $wp_query;
		$post_titles = array_map(
			function( $post ) {
				return $post->post_title;
			},
			$wp_query->posts
		);

		$index = 1;
		while ( $index <= self::$total_posts ) {
			self::assertContains(
				'Regular Post ' . (string) $index,
				$post_titles,
				'Query contains regular posts.'
			);
			$index ++;
		}

		self::assertContains(
			get_the_title( self::$public ),
			$post_titles,
			'Query contains the public newsletter.'
		);

		self::assertNotContains(
			get_the_title( self::$private ),
			$post_titles,
			'Query does not contain the private newsletter.'
		);
	}

	/**
	 * Test newsletter post type archive.
	 */
	public function test_newsletter_archive() {
		self::go_to( get_post_type_archive_link( \Newspack_Newsletters::NEWSPACK_NEWSLETTERS_CPT ) );
		self::assertQueryTrue( 'is_archive', 'is_post_type_archive' );

		global $wp_query;
		$post_titles = array_map(
			function( $post ) {
				return $post->post_title;
			},
			$wp_query->posts
		);

		$index = 1;
		while ( $index <= self::$total_posts ) {
			self::assertNotContains(
				'Regular Post ' . (string) $index,
				$post_titles,
				'Query does not contain regular posts.'
			);
			$index ++;
		}

		self::assertContains(
			get_the_title( self::$public ),
			$post_titles,
			'Query contains the public newsletter.'
		);

		self::assertNotContains(
			get_the_title( self::$private ),
			$post_titles,
			'Query does not contain the private newsletter.'
		);
	}

	/**
	 * Test search results.
	 */
	public function test_search_results() {
		self::go_to( get_search_link( 'newsletter' ) );
		self::assertQueryTrue( 'is_search' );

		global $wp_query;
		$post_titles = array_map(
			function( $post ) {
				return $post->post_title;
			},
			$wp_query->posts
		);

		self::assertContains(
			get_the_title( self::$public ),
			$post_titles,
			'Query contains the public newsletter.'
		);

		self::assertNotContains(
			get_the_title( self::$private ),
			$post_titles,
			'Query does not contain the private newsletter.'
		);
	}
}
